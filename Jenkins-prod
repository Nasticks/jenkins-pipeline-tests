pipeline{
    agent any
    environment {
        GIT_CREDENTIALS_ID = 'github' // Remplacez par l'ID de vos credentials GitHub
        SCANNER_HOME=tool 'sonar-scanner'
    }
    tools{
        jdk 'jdk17'
        nodejs 'node16'
    }
     
    // environment {
    //     SCANNER_HOME=tool 'sonar-scanner'
    // }
    stages {
        stage('clean workspace'){
            steps{
                cleanWs()
            }
        }
        stages {
        stage('Checkout') {
            steps {
                // Checkout the code from your repository
                git branch: 'main', url: 'https://github.com/Nasticks/jenkins-pipeline-tests.git', credentialsId: env.GIT_CREDENTIALS_ID
            }
        }
        }
        stage("Sonarqube Analysis "){
            steps{
                withSonarQubeEnv('sonar-server') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Flask \
                    -Dsonar.projectKey=Flask '''
                }
            }
        }
        stage("quality gate"){
           steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'Sonar-token' 
                }
            } 
        }
        stage('Install Dependencies') {
            steps {
                sh "npm install"
            }
        }
        // stage('OWASP FS SCAN') {
        //     steps {
        //         dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
        //         dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
        //     }
        // }
        
        stage('TRIVY FS SCAN') {
            steps {
                sh "trivy fs . > trivyfs.txt"
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image
                    sh 'docker build -t hello-world-flask:latest .'
                }
            }
        }
        stage('Deploy Docker Image') {
            steps {
                script {
                    // Deploy the Docker image on the deployment server
                    sh '''
                    docker stop hello-world-flask || true
                    docker rm hello-world-flask || true
                    docker run -d -p 8000:8000 --name hello-world-flask hello-world-flask:latest
                    docker start hello-world-flask 
                    '''
                }
            }
        }

    }
}